-- SELECT nationality FROM actors WHERE first_name = 'Sarah';
-- SELECT COUNT(*) FROM actors WHERE nationality = null; -- null means unknown
-- SELECT COUNT(*) FROM actors WHERE nationality IS null; -- null is now a value
-- SELECT COUNT(*) FROM actors WHERE nationality IS NOT null;
​
-- ONE TO ONE RELATIONSHIP
-- CAR BELONG TO ONLY 1 PERSON
-- 1 PERSON CAN ONLY OWN 1 CAR
​
-- SELECT * FROM actors;
​
CREATE TABLE cars (
  car_id SERIAL PRIMARY KEY,
  brand VARCHAR(30) NOT NULL,
  color VARCHAR(30) NOT NULL,
  owner_id INTEGER UNIQUE REFERENCES actors (actor_id) -- one to one relationship
);
​
INSERT INTO cars (brand, color, owner_id)
VALUES
('BMW', 'blue', (SELECT actor_id FROM actors WHERE first_name='John' AND last_name='Smith')),
('RENAULT', 'red', (SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney'))
RETURNING *
​
INSERT INTO cars (brand, color, owner_id)
VALUES
('JAGUAR', 'pink', (SELECT actor_id FROM actors WHERE first_name='George' AND last_name='Clooney'))
RETURNING * -- error because violates the UNIQUE constraint
​
​
-- the actors that have a car
SELECT first_name, last_name, brand, color
FROM actors
INNER JOIN cars
ON actors.actor_id = cars.owner_id;
​
-- all the actors even those that don't have a car
SELECT first_name, last_name, brand, color
FROM actors
LEFT JOIN cars
ON actors.actor_id = cars.owner_id; -- table1.pk = table2.fk
​
​
​